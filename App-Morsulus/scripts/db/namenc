#!/usr/local/bin/perl
use strict;
use warnings;
use Morsulus::Ordinary::Classic;
use Getopt::Euclid;
use feature 'say';

#%  List name-changes -corrections, and -updates
#%   that lack matching registration data.
my %referenced;
my %registered;

#my $ord = Morsulus::Ordinary::Classic->new(dbname => $ARGV{-db});
#my $recs = $ord->Registration->search();
my @recs = `/usr/local/bin/dump_db_all -db $ARGV{-db}`;

#while (my $rec = $ord->get_registration($recs->next))
for my $rec (@recs)
{
    # Split the record into fields.
    my ($name, $source, $type, $text, $notes, $other) =
        split(/\|/, $rec);
    $text =~ s/^See // if ($type eq 'NC' || $type eq 'BNC');
    my ($reg, $rel) = split(/\-/, $source);
    if ($type eq 'u')
    {
        $type = 'BNC';
    }
    if ($type eq 'NC')
    {
        if ($notes =~ /variant/)
        {
            $type = 'vc';
        }
        elsif ($notes =~ /designation/)
        {
            $type = 'RC';
        }
        elsif ($notes =~ /branch/)
        {
            $type = 'BNC';
        }
        elsif ($notes =~ /title/)
        {
            $type = 'tC';
        }
        elsif ($notes =~ /household name/)
        {
            $type = 'HNC';
        }
        elsif ($notes =~ /order name/)
        {
            $type = 'OC';
        }
        elsif ($notes =~ /alternate name/)
        {
            $type = 'ANC';
        }
    }
    if ($type =~ /^(N|BN|t|HN|O|AN)[Cc]$/)
    {
        my $class = $1;
        $name = "$class!$name";
        $text = "$class!$text";
        if ($source !~ /\-/)
        {
            $reg = '';
            $rel = $source;
        }
        if ($notes !~ /erroneous/ && $rel ne '' && $notes !~ /belated/)
        {
            my $r = $referenced{$name} || '';
            if (! exists $referenced{$text})
            {
                $referenced{$text} = $rel;
            }
            elsif ($referenced{$text} ne $rel)
            {
                say "$text -- two change/correction/update sources: $r $rel";
            }
        }
        if ($notes !~ /inaccurate/ && $reg ne '')
        {
            my $r = $registered{$name} || '';
            if (! exists $registered{$name})
            {
                $registered{$name} = $reg;
            }
            elsif ($registered{$name} ne $reg)
            {
                say "$name -- two registration sources: $r $reg";
            }
        }

    }
    elsif ($type =~ /^N|BN|t|HN|O|AN$/)
    {
        $name = "$type!$name";
        if (defined $reg)
        {
            my $r = $registered{$name} || '';
            if (! exists $registered{$name})
            {
                $registered{$name} = $reg;
            }
            elsif ($registered{$name} ne $reg)
            {
                say "$name -- two registration sources: $r $reg";
            }
        }

    }
}

while (my ($name, $date) = each %registered)
{
    my $r = $referenced{$name} || '';
    if ($r eq '')
    {
        delete $referenced{$name};
    }
}

while (my ($name, $date) = each %referenced)
{
    my $reg = $registered{$name} || '';
    if ($date ne '' && $date ne $reg)
    {
        if ($reg eq '')
        {
            say "$date $name -- missing registration source";
        }
        else
        {
            say
"$name -- wrong registration source -- should be $date, not $reg";
        }
    }
}

__END__

=head1 NAME

namenc - check for registration dates for names

=head1 REQUIRED

=over

=item -db <file>

SQLite database file.

=for Euclid:
    file.type: writable

=back

