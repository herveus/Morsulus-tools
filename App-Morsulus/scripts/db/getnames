#!/usr/local/bin/perl
use warnings;
use strict;
use Morsulus::Ordinary::Classic;
use Getopt::Euclid;
use feature 'say';

#%  Extract names from an ordinary database.

if ($ARGV{-r})
{
    $ARGV{-mr} = 1;
    $ARGV{-cr} = 1;
}

my $ord = Morsulus::Ordinary::Classic->new(dbname => $ARGV{-db});

if ($ARGV{-cr})
{
    my @reg_owner_name = qw/N BN T A B D S a b d g s D? BD j/;
    my $reg_owner_name_action_in = join(", ", map {"'$_'"} @reg_owner_name);
    my @text_name = qw/AN j HN O t/;
    my $text_name_action_in = join(", ", map {"'$_'"} @text_name);

    my $sth = $ord->dbh->prepare("select reg_owner_name from registrations where action in ($reg_owner_name_action_in)");
    $sth->execute;
    my $names = $sth->fetchall_arrayref;
    print map {$_->[0]."\n"} @$names;

    $sth = $ord->dbh->prepare("select text_name from registrations where action in ($text_name_action_in)");
    $sth->execute;
    $names = $sth->fetchall_arrayref;
    for my $name (map { $_->[0] } @$names)
    {
        for my $n (split(/" and "/, $name))
        {
            $n =~ s/^"//;
            $n =~ s/"$//;
            say $n;
        }
    }

    $sth = $ord->dbh->prepare("select note_name from notes where note_name is not null");
    $sth->execute;
    $names = $sth->fetchall_arrayref;
    print map {$_->[0]."\n"} @$names;
}
else
{
    die "unimplemented option(s)";
}
exit;

=pod

  chop;  # Strip off the record separator.

  # Split the record into fields.
  ($name, $s, $type, $text, $notes, $other) = split (/\|/);
  if ($type eq 'N' || $type eq 'BN') {
    if ($ARGV{-f1} || $ARGV{-mr} || $ARGV{-cr}) {
      print $name;
    }

  } elsif ($type eq 'NC' || $type eq 'BNC') {
    $ahonc = ($notes =~
/(alternate|household|order) name (variant )?(change|correction|verification)/);
    $correction = ($notes =~ /variant correction/);
    $inaccurate = ($notes =~ /inaccurate/);
    if ($ARGV{-f1} ||
        $ARGV{-mr} && !$ahonc && !$correction && !$inaccurate) {
      print $name;
    }
    if ($ARGV{-f4} || $ARGV{-r} && !$ahonc) {
      $targets = $text;
      $targets =~ s/^See //;
      print $targets;
    }

  } elsif ($type eq 'OC' || $type eq 'ANC' || $type eq 'HNC'
        || $type eq 'Nc' || $type eq 'BNc') {
    if ($ARGV{-f1}) {
      print $name;
    }
    if ($ARGV{-f4}) {
      print $text;
    }

  } elsif ($type eq 'T') {
    print $name
     if ($ARGV{-f1} || $ARGV{-cr});
    print $text if ($ARGV{-f4});

  } elsif ($type =~ /^[ABDSabdgs]$/ || $type eq 'D?' || $type eq 'BD') {
    print $name
     if ($ARGV{-f1} || $ARGV{-mr} || $ARGV{-cr});

  } elsif ($type eq 'AN') {
    if ($ARGV{-f1}) {
      print $name;
    }
    if ($ARGV{-f4} || $ARGV{-cr}) {
      $targets = $text;
      $targets =~ s/^For //;
      print $targets;
    }

  } elsif ($type =~ /^(HN|O|t)$/) {
    if ($ARGV{-f1}) {
      print $name;
    }
    if ($ARGV{-f4} || $ARGV{-cr}) {
      $targets = $text;
      $targets = $1 if ($targets =~ /^\"(.*)\"$/);
      @targs = split (/\" and \"/, $targets);
      print @targs;
    }

  } elsif ($type eq 'R') {
    if ($ARGV{-f1}) {
      print $name;
    }
    if ($ARGV{-r} || $ARGV{-f4}) {
      $targets = $text;
      if ($targets =~ /^See joint badge for (.+) under (.+)$/) {
        print $2;
      } else {
        $targets =~ s/^See (also |joint badge under )?//;
        if ($targets =~ /^\"(.*)\"$/) {
          $targets = $1;
        }
        @targs = split (/\" or \"/, $targets);
        print @targs;
      }
    }

  } elsif ($type eq 'j') {
    if ($ARGV{-f1} || $ARGV{-cr}) {
      print $name;
    }
    if ($ARGV{-f4} || $ARGV{-cr}) {
      print $text;
    }

  } elsif ($type eq 'v' || $type eq 'Bv') {
    $ahov = ($notes =~ /(alternate|household|order) name variant/);
    if ($ARGV{-f1}) {
      print $name;
    }
    if ($ARGV{-f4} || $ARGV{-r} && !$ahov) {
      print $text;
    }

  } else {
    if ($ARGV{-f1}) {
      print $name;
    }
  }

  if ($notes =~ /^\((.*)\)$/) {
    foreach (split (/\)\(/, $1)) {
      if (/^Also the arms of( the)? (.+)$/) {
        print $2 if ($ARGV{-f5} || $ARGV{-cr});
      } elsif (/^JB: (.+)$/) {
        print $1 if ($ARGV{-f5} || $ARGV{-cr});
      } elsif (/^same (person|branch) as ( the)? (.+)$/) {
        print $3 if ($ARGV{-f5} || $ARGV{-cr});
      } elsif (/^-?transferred to( the)? (.+)$/) {
        print $2 if ($ARGV{-f5} || $ARGV{-cr});
      } elsif (/^For( the)? (.+)$/) {
        $listing = $2;
        if ($listing =~
          /^(award|bard|borough|college|compagnie|guild|honou?r of the|orde[nr]|ord[eo]|ordre|braithrean|brotherhood|casa|castle of|castrum|ch[a\342]teau|ch\{a\^\}teau|clan|clann|company|fellowship|freehold|house|household|h[ao]?us|keep|league|maison|office) (.*)/i) {
	  $listing = "$2, $1";
	  if ($listing =~
            /^(a[fn]|aus|d[eou]|de[ils]|della|in|na|of?|van|vo[mn]) (.*)/i) {
	    $listing = "$2 $1";
          }
	  if ($listing =~
             /^(das|de[mn]|der|die|el|l[ae]|les|the) (.*)/i) {
             $listing = "$2 $1";
          }
	}
	print $listing if ($ARGV{-f5});
      }
    }
  } # if $get_notes_field
}

=cut

__END__

=head1 NAME

getnames - extract names from an ordinary database

=head1 REQUIRED

=over

=item -db <file>

SQLite database file.

=for Euclid:
    file.type: writable

=back

=head1 OPTIONS

=over

=item -mr

Get minimal registrants. 

=item -r

Get registrants; implies -mr and -cr.

=item -cr

Get current registrants.

For type N, BN, T, A, B, D, S, a, b, d, g, s, D?, BD, j: the reg_owner_name

For type AN, j: the text_name

For type HN, O, t: the text_name split on " and "

All note_names

=item -f1

Get name field names

=item -f4

Get text field names

=item -f5 

Get notes names

=back
