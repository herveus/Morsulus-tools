.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.23)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Daud 3"
.TH Daud 3 "2009-11-10" "perl v5.16.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Daud \- Perl extension converting between Daud encoding and other styles
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Daud;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Converts from Daud encoding to \s-1ASCII\s0, Latin\-1, \s-1HTML\s0 entity, Postscript,
and Unicode representations. Some conversions are lossy.
.PP
Daud encoding provides a typewriter-safe way to represent characters
not present on a standard American typewriter keyboard. Such characters
typically have accents, or are ligatures of some sort. Note that this
precludes the use of ` (backtick).
.PP
Character encodings are (typically) two characters within curly braces.
One is the underlying letter, and the other represents the accent mark.
.PP
For example, e\-acute is {e'} and C\-cedilla is {C,}.
.PP
For a grave accent, put the quote before the letter as in e\-grave {'e}.
.PP
Ash, edh and thorn are {\s-1AE\s0}/{ae}, {Dh}/{dh}, and {Th}/{th}.
.PP
The accent indicators are:
.IP "' \- acute accent (after) or grave accent (before)" 4
.IX Item "' - acute accent (after) or grave accent (before)"
.PD 0
.IP "^ \- circumflex" 4
.IX Item "^ - circumflex"
.IP "~ \- tilde" 4
.IX Item "~ - tilde"
.IP ": \- umlaut/diaresis" 4
.IX Item ": - umlaut/diaresis"
.IP "o \- ring" 4
.IX Item "o - ring"
.IP ", \- cedilla/ogonek" 4
.IX Item ", - cedilla/ogonek"
.IP "/ \- stroke" 4
.IX Item "/ - stroke"
.IP "\- \- macron/topbar" 4
.IX Item "- - macron/topbar"
.IP "v \- hacek/caron" 4
.IX Item "v - hacek/caron"
.IP "u \- breve" 4
.IX Item "u - breve"
.IP """ \- double grave (before) or double acute (after)" 4
.IX Item """ - double grave (before) or double acute (after)"
.IP "n _ inverted breve" 4
.IX Item "n _ inverted breve"
.IP ". \- dot below for consonants; I. is Capital I with dot" 4
.IX Item ". - dot below for consonants; I. is Capital I with dot"
.PD
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
Nothing by default. The following routines are exported on demand.
.IP "get_style" 4
.IX Item "get_style"
Return the current target representation. By default, this is \*(L"ascii\*(R".
.IP "set_style(style)" 4
.IX Item "set_style(style)"
Set the target representation. Acceptable values of style are:
.Sp
.Vb 5
\&  ascii \- ASCII characters only
\&  latin1 \- ISO 8859\-1 (Latin\-1) characters
\&  html \- HTML named entities
\&  postscript \- Postscript characters
\&  unicode \- Unicode characters
.Ve
.Sp
Returns undef if style is not valid. Returns the new style otherwise.
.IP "get_styles" 4
.IX Item "get_styles"
Return a list of acceptable styles. The list is in no particular order.
.IP "lose_data(string)" 4
.IX Item "lose_data(string)"
Returns \s-1TRUE\s0 if converting the string to the target style will cause
data loss.
.IP "recode(string)" 4
.IX Item "recode(string)"
Converts the string to the target style. If called in a void context,
modifies the string in place, otherwise returns the modified string.
.IP "daudify(string)" 4
.IX Item "daudify(string)"
Converts the string to Da'ud notation. Named entities, ampersand-escaped
hex characters, and hi-bit characters are each converted. A warning is
thrown for each unrecognizable character encountered.
.Sp
Returns the converted string.
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Houghton, copyright (c) 2002, all rights reserved.
.PP
This software may be used under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SH "TODO"
.IX Header "TODO"
Conversion to Daud from appropriate input character sets (Latin1,
\&\s-1HTML\s0 entity, and Unicode come to mind).
